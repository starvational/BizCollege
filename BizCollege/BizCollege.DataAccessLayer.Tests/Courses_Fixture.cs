using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NUnit.Framework;
using BizCollege.DataAccessLayer.Domain;
using BizCollege.DataAccessLayer.Repository;

namespace BizCollege.DataAccessLayer.Tests
{
    [TestFixture]
    public class Courses_Fixture
    {
        [SetUp]
        public void Setup()
        {
            // Uncomment to debug the tests when using NUnit gui
            //System.Diagnostics.Debugger.Launch();
        }

        [Test]
        public void CanAddNewCourse()
        {
            var dummyCourse = CreateDummyCourse();

            // Course Id's are autogenerated by the database, so when we
            // add a new one to the db, we cache the assigned Id after the
            // add operation has completed (that way we can retrieve the course
            // from the db to run our assertions on the data
            ICoursesModel model = new CoursesModel();
            dummyCourse.Id = model.AddOrUpdateCourse(dummyCourse).Id;

            // Retrieve the newly added course back out from the Db
            var repo = new BizCollegeRepository<Course, string>();
            var fromDb = repo.Get(dummyCourse.Id);

            // Check the values against our dummy course
            Assert.NotNull(fromDb);
            Assert.AreEqual(dummyCourse.Id, fromDb.Id);
            Assert.AreEqual(dummyCourse.Name, fromDb.Name);
            Assert.AreEqual(dummyCourse.Description, fromDb.Description);
            Assert.AreEqual(dummyCourse.CreatedByUsername, fromDb.CreatedByUsername);
            Assert.AreEqual(dummyCourse.LastUpdateByUsername, fromDb.LastUpdateByUsername);
            Assert.AreEqual(dummyCourse.CourseSlides.Count, fromDb.CourseSlides.Count);

            // clean-up db
            repo.Remove(fromDb.Id);
        }

        [Test]
        public void CanRemoveExistingCourse()
        {
            var dummyCourse = CreateDummyCourse();

            ICoursesModel model = new CoursesModel();
            dummyCourse.Id = model.AddOrUpdateCourse(dummyCourse).Id;

            // Remove the dummyCourse
            model.RemoveCourse(dummyCourse.Id);

            // Check that the course was removed from the Db
            var repo = new BizCollegeRepository<Course, string>();
            var fromDb = repo.Get(dummyCourse.Id);

            Assert.IsNull(fromDb);
        }

        #region unimplemented tests
        [Test]
        public void CanUpdateExistingCourse()
        {
            throw new NotImplementedException();
        }

        [Test]
        public void CanGetAllCourses()
        {
            throw new NotImplementedException();
        }
        #endregion

        /// <summary>
        /// Helper method that generates a Course to used for running the various course
        /// tests that use a Course container to add to the database
        /// </summary>
        /// <returns></returns>
        private Course CreateDummyCourse()
        {
            var dummyCourse = new Course();
            dummyCourse.CreatedByUsername = "miguel";
            dummyCourse.Name = "Business 101";
            dummyCourse.Description = "Learn the basics about running a business";
            dummyCourse.State = CourseState.Inactive;
            dummyCourse.LastUpdateByUsername = "miguel";
            dummyCourse.CourseSlides = new List<CourseContent>();

            return dummyCourse;
        }
    }
}

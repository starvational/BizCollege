using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using BizCollege.DataAccessLayer.Repository;
using BizCollege.DataAccessLayer.Domain;
using BizCollege.DataAccessLayer.Helper;

namespace BizCollege.DataAccessLayer
{
    /// <summary>
    /// Used to interface with the BizCollege courses repository: to add new
    /// courses to the data store; remove an existing course; udpate an existing
    /// course; get an existing course, or get a list of all courses in the system.
    /// </summary>
    public class CoursesModel : ICoursesModel
    {
        private IRepository<Course, string> m_coursesRepo;

        public CoursesModel()
        {
            m_coursesRepo = new BizCollegeRepository<Course, string>();
        }

        /// <summary>
        /// 1)  Used to add a new course to the database (WARNING:  don't set the Course.Id 
        ///     if it's a new course since these are automatically generated by the database)
        /// 
        /// 2)  Used to update an existing course (all properties and property collectios will be
        ///     automatically updated and persisted to the database)
        ///     
        /// Note 1:  the course.CreationeDate datetime will be set internally if you didn't set it yourself
        /// Note 2:  the course.LastUdpate datetime will be set internally everytime you call this method
        /// </summary>
        /// <param name="courseToAddOrUpdate">The Course object to add to the database or to update in the database</param>
        /// <returns>A copy of the persisted course (Note:  the Course.Id will be populated for all new courses)</returns>
        public Course AddOrUpdateCourse(Domain.Course courseToAddOrUpdate)
        {
            // If the course creation date was not initialized by the course creator
            // initialize it to the current datetime, otherwise, we'll get an exception
            // since the .Net DateTime min value is less than the allowed SQL server
            // database minimum value
            if (courseToAddOrUpdate.CreationDate < System.Data.SqlTypes.SqlDateTime.MinValue.Value)
            {
                courseToAddOrUpdate.CreationDate = SqlServerHelper.GetSqlServerMinimumDateTimeValue();
            }

            courseToAddOrUpdate.LastUpdated = DateTime.Now;
            return m_coursesRepo.AddOrUpdate(courseToAddOrUpdate);
        }

        /// <summary>
        /// Remove the course given it's unique id (Course.Id)
        /// </summary>
        /// <param name="courseId">The unqiue id of the course (Course.Id)</param>
        /// <exception cref="System.InvalidOperationException">If no course with that Id is found</exception>
        public void RemoveCourse(string courseId)
        {
            var course = m_coursesRepo.Get(courseId);
            if (course == null)
            {
                throw new InvalidOperationException("That course does not exist in the system");
            }
            else
            {
                m_coursesRepo.Remove(courseId);
            }
        }

        /// <summary>
        /// Retrieves the course from the database
        /// </summary>
        /// <param name="courseId">The internal id of the course (Course.Id)</param>
        /// <returns>Will return the persisted Course, Null if no course if found</returns>
        public Domain.Course GetCourse(string courseId)
        {
            return m_coursesRepo.Get(courseId);
        }

        /// <summary>
        /// Retrieves all the courses currently in the database
        /// </summary>
        /// <returns>The collection of courses, or empty if no courses were found</returns>
        public ICollection<Domain.Course> GetAllCourses()
        {
            return m_coursesRepo.GetAllItems();
        }
    }
}
